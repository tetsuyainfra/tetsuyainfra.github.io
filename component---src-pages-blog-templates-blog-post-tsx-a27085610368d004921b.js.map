{"version":3,"file":"component---src-pages-blog-templates-blog-post-tsx-a27085610368d004921b.js","mappings":"0NASA,MA2DaA,EAAO,KAAMC,EAAAA,EAAAA,IAACC,EAAAA,EAAG,CAACC,MAAM,kBAErC,UA7DiBC,IAE4C,IAF3C,KAChBC,GACsD,GAClD,MAAEF,IAAUG,EAAAA,EAAAA,KAKhB,MAAM,KAAEC,EAAI,KAAEC,EAAI,SAAEC,EAAUC,eAAgBC,GAASN,EAGvD,OADAO,QAAQC,IAAIL,EAAMC,IAEhBR,EAAAA,EAAAA,IAACa,EAAAA,EAAM,CAACC,UAAWZ,IACjBF,EAAAA,EAAAA,IAAAA,UAAAA,CACEe,UAAU,YACVC,WAAS,EACTC,SAAS,8BAETjB,EAAAA,EAAAA,IAAAA,SAAAA,MACEA,EAAAA,EAAAA,IAAAA,KAAAA,CAAIkB,SAAS,YAAYR,EAAMS,YAAajB,QAC5CF,EAAAA,EAAAA,IAAAA,IAAAA,KAAIU,EAAMS,YAAaC,QAEzBpB,EAAAA,EAAAA,IAAAA,UAAAA,CACEqB,wBAAyB,CAAEC,OAAQZ,EAAMa,MACzCL,SAAS,iBAEXlB,EAAAA,EAAAA,IAAAA,KAAAA,OACAA,EAAAA,EAAAA,IAAAA,SAAAA,OACS,KACXA,EAAAA,EAAAA,IAAAA,MAAAA,CAAKe,UAAU,kBACbf,EAAAA,EAAAA,IAAAA,KAAAA,CACEwB,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,KAGX7B,EAAAA,EAAAA,IAAAA,KAAAA,KACGQ,IACCR,EAAAA,EAAAA,IAAC8B,EAAAA,GAAI,CAACC,GAAIvB,EAASwB,OAAOC,IAAKC,IAAI,QAAO,KACrC1B,EAASW,YAAYjB,SAI9BF,EAAAA,EAAAA,IAAAA,KAAAA,KACGO,IACCP,EAAAA,EAAAA,IAAC8B,EAAAA,GAAI,CAACC,GAAIxB,EAAKyB,OAAQC,IAAMC,IAAI,QAC9B3B,EAAKY,YAAajB,MAAM,SAM5B,C","sources":["webpack://blog-tetsuyainfra/./src/pages/blog/templates/_blog-post.tsx"],"sourcesContent":["import * as React from 'react'\nimport { graphql, PageProps, Link } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport Layout from '../../../components/layout'\nimport Seo from '../../../components/seo'\nimport useSiteMetadata from '../../../components/useSiteMetadata'\n\nimport { DeepNonNullable } from 'utility-types'\n\nconst BlogPost = ({\n  data,\n}: PageProps<DeepNonNullable<Queries.BlogPostByIdQuery>>) => {\n  let { title } = useSiteMetadata()\n  // useStaticQuery()\n\n  // const { previous, next, site, markdownRemark: post } = data\n  // const { site, markdownRemark: post } = data\n  const { site, next, previous, markdownRemark: post } = data\n\n  console.log(next, previous)\n  return (\n    <Layout pageTitle={title}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post!.frontmatter!.title}</h1>\n          <p>{post!.frontmatter!.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post!.html! }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>{/* <Bio /> */}</footer>\n      </article>{' '}\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.url} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields!.url!} rel=\"next\">\n                {next.frontmatter!.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"My Blog Posts\" />\n\nexport default BlogPost\n\nexport const pageQuery = graphql`\n  query BlogPostById(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        # description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        url\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        url\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["Head","___EmotionJSX","Seo","title","_ref","data","useSiteMetadata","site","next","previous","markdownRemark","post","console","log","Layout","pageTitle","className","itemScope","itemType","itemProp","frontmatter","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","url","rel"],"sourceRoot":""}