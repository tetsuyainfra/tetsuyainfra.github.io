{"version":3,"file":"component---src-pages-blog-templates-blog-post-tsx-33d073a22e4b51359daa.js","mappings":"mLAGWA,EAAc,sCACdC,EAAc,sC,UC2CzB,MAlC2EC,IAGpE,IAHqE,UAC1EC,EAAS,SACTC,GACD,EACC,OACEC,EAAAA,cAAAA,MAAAA,CAAKC,UDjBc,mCCkBjBD,EAAAA,cAAAA,SAAAA,CAAQC,UDbS,qCCacC,EAAAA,EAAAA,KAAkBC,OACjDH,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,KAAAA,CAAIC,UDhBU,mCCiBZD,EAAAA,cAAAA,KAAAA,CAAIC,UAAWN,GACbK,EAAAA,cAACI,EAAAA,GAAI,CAACC,GAAG,IAAIJ,UAAWL,GAAa,SAIvCI,EAAAA,cAAAA,KAAAA,CAAIC,UAAWN,GACbK,EAAAA,cAACI,EAAAA,GAAI,CAACC,GAAG,SAASJ,UAAWL,GAAa,UAI5CI,EAAAA,cAAAA,KAAAA,CAAIC,UAAWN,GACbK,EAAAA,cAACI,EAAAA,GAAI,CAACC,GAAG,QAAQJ,UAAWL,GAAa,WAM/CI,EAAAA,cAAAA,OAAAA,KACEA,EAAAA,cAAAA,KAAAA,CAAIC,UDtCS,iCCsCYH,GACxBC,GAEC,C,yDCrBV,IAlByCF,IAAgB,IAAf,MAAEM,GAAO,GACpCG,EAAAA,EAAAA,IAAe,cAU5B,OACEN,EAAAA,cAAAA,QAAAA,KACGG,EAAM,OAAID,EAAAA,EAAAA,KAAkBC,MACvB,C,qCCqBZ,IAnCwB,KAGTG,EAAAA,EAAAA,IAAc,aA6BfC,KAAKC,Y,uHC3BnB,MA2DaC,EAAO,IAAMT,EAAAA,cAACU,EAAAA,EAAG,CAACP,MAAM,kBAErC,UA7DiBN,IAE4C,IAF3C,KAChBc,GACsD,GAClD,MAAER,IAAUD,EAAAA,EAAAA,KAKhB,MAAM,KAAEK,EAAI,KAAEK,EAAI,SAAEC,EAAUC,eAAgBC,GAASJ,EAGvD,OADAK,QAAQC,IAAIL,EAAMC,GAEhBb,EAAAA,cAACkB,EAAAA,EAAM,CAACpB,UAAWK,GACjBH,EAAAA,cAAAA,UAAAA,CACEC,UAAU,YACVkB,WAAS,EACTC,SAAS,6BAETpB,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAAAA,KAAAA,CAAIqB,SAAS,YAAYN,EAAMO,YAAanB,OAC5CH,EAAAA,cAAAA,IAAAA,KAAIe,EAAMO,YAAaC,OAEzBvB,EAAAA,cAAAA,UAAAA,CACEwB,wBAAyB,CAAEC,OAAQV,EAAMW,MACzCL,SAAS,gBAEXrB,EAAAA,cAAAA,KAAAA,MACAA,EAAAA,cAAAA,SAAAA,OACS,IACXA,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,iBACbD,EAAAA,cAAAA,KAAAA,CACE2B,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGXhC,EAAAA,cAAAA,KAAAA,KACGa,GACCb,EAAAA,cAACI,EAAAA,GAAI,CAACC,GAAIQ,EAASoB,OAAOC,IAAKC,IAAI,QAAO,KACrCtB,EAASS,YAAYnB,QAI9BH,EAAAA,cAAAA,KAAAA,KACGY,GACCZ,EAAAA,cAACI,EAAAA,GAAI,CAACC,GAAIO,EAAKqB,OAAQC,IAAMC,IAAI,QAC9BvB,EAAKU,YAAanB,MAAM,SAM5B,C","sources":["webpack://blog-tetsuyainfra/./src/components/layout.module.css","webpack://blog-tetsuyainfra/./src/components/layout.tsx","webpack://blog-tetsuyainfra/./src/components/seo.tsx","webpack://blog-tetsuyainfra/./src/components/useSiteMetadata.tsx","webpack://blog-tetsuyainfra/./src/pages/blog/templates/_blog-post.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var container = \"layout-module--container--78b04\";\nexport var heading = \"layout-module--heading--f158c\";\nexport var navLinkItem = \"layout-module--nav-link-item--a5f0a\";\nexport var navLinkText = \"layout-module--nav-link-text--69cda\";\nexport var navLinks = \"layout-module--nav-links--1113b\";\nexport var siteTitle = \"layout-module--site-title--e4dea\";","import * as React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\n\nimport gStyles, {\n  container,\n  heading,\n  navLinks,\n  navLinkItem,\n  navLinkText,\n  siteTitle,\n} from './layout.module.css'\nimport useSiteMetadata from './useSiteMetadata'\n\nconst Layout: React.FC<{ pageTitle: string; children: React.ReactNode }> = ({\n  pageTitle,\n  children,\n}) => {\n  return (\n    <div className={container}>\n      <header className={siteTitle}>{useSiteMetadata().title}</header>\n      <nav>\n        <ul className={navLinks}>\n          <li className={navLinkItem}>\n            <Link to=\"/\" className={navLinkText}>\n              Home\n            </Link>\n          </li>\n          <li className={navLinkItem}>\n            <Link to=\"/about\" className={navLinkText}>\n              About\n            </Link>\n          </li>\n          <li className={navLinkItem}>\n            <Link to=\"/blog\" className={navLinkText}>\n              Blog\n            </Link>\n          </li>\n        </ul>\n      </nav>\n      <main>\n        <h1 className={heading}>{pageTitle}</h1>\n        {children}\n      </main>\n    </div>\n  )\n}\n\nexport default Layout\n","import * as React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport useSiteMetadata from './useSiteMetadata'\n\nconst Seo: React.FC<{ title: String }> = ({ title }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <title>\n      {title} | {useSiteMetadata().title}\n    </title>\n  )\n}\n\nexport default Seo\n","import * as React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport { DeepNonNullable } from 'utility-types'\n\nconst useSiteMetadata = () => {\n  type TypeOfUseSiteMetadata = DeepNonNullable<Queries.useSiteMetadataQuery>\n\n  const data = useStaticQuery<TypeOfUseSiteMetadata>(graphql`\n    query useSiteMetadata {\n      site {\n        siteMetadata {\n          title\n          description\n          siteUrl\n          dateFormat\n          timestampFormat\n          timeZone\n          siteSections {\n            title\n            url\n            icon\n          }\n          author {\n            name\n            summary\n          }\n          titleTemplate\n          social {\n            twitter\n            github\n          }\n        }\n      }\n    }\n  `)\n\n  return data.site.siteMetadata\n}\n\nexport default useSiteMetadata\n","import * as React from 'react'\nimport { graphql, PageProps, Link } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport Layout from '../../../components/layout'\nimport Seo from '../../../components/seo'\nimport useSiteMetadata from '../../../components/useSiteMetadata'\n\nimport { DeepNonNullable } from 'utility-types'\n\nconst BlogPost = ({\n  data,\n}: PageProps<DeepNonNullable<Queries.BlogPostByIdQuery>>) => {\n  let { title } = useSiteMetadata()\n  // useStaticQuery()\n\n  // const { previous, next, site, markdownRemark: post } = data\n  // const { site, markdownRemark: post } = data\n  const { site, next, previous, markdownRemark: post } = data\n\n  console.log(next, previous)\n  return (\n    <Layout pageTitle={title}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post!.frontmatter!.title}</h1>\n          <p>{post!.frontmatter!.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post!.html! }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>{/* <Bio /> */}</footer>\n      </article>{' '}\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.url} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields!.url!} rel=\"next\">\n                {next.frontmatter!.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"My Blog Posts\" />\n\nexport default BlogPost\n\nexport const pageQuery = graphql`\n  query BlogPostById(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        # description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        url\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        url\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["navLinkItem","navLinkText","_ref","pageTitle","children","React","className","useSiteMetadata","title","Link","to","useStaticQuery","site","siteMetadata","Head","Seo","data","next","previous","markdownRemark","post","console","log","Layout","itemScope","itemType","itemProp","frontmatter","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","url","rel"],"sourceRoot":""}