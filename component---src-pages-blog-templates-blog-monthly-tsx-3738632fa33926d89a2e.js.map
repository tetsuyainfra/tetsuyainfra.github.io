{"version":3,"file":"component---src-pages-blog-templates-blog-monthly-tsx-3738632fa33926d89a2e.js","mappings":"yHAEAA,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAA,QAEA,SAAgBE,EAAQC,GACtB,GAAc,MAAVD,EACF,MAAM,IAAIE,UAAU,iEAGtB,IAAK,IAAIC,KAAYF,EACfL,OAAOQ,UAAUC,eAAeC,KAAKL,EAAQE,KAE/CH,EAAOG,GAAYF,EAAOE,IAI9B,OAAOH,CACT,EAEAO,EAAOT,QAAUA,EAAQU,O,uBCpBzBZ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAA,QAMA,SAAqBG,GACnB,OAAO,EAAIQ,EAAOD,SAAS,CAAC,EAAGP,EACjC,EANA,IAEgCS,EAF5BD,GAE4BC,EAFI,EAAQ,QAESA,EAAIC,WAAaD,EAAM,CAAEF,QAASE,GAMvFH,EAAOT,QAAUA,EAAQU,O,8NCAzB,MAwDaI,EAAO,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAM,kBACrC,MAzDgCC,IAGnB,IAHoB,KAC/BC,EACAC,aAAa,cAAEC,EAAa,gBAAEC,IACxB,EAEN,MAAQC,MAAOC,GAAUL,EAAKM,kBAqB9B,MAEMC,ECbO,SAAwBC,EAAMC,EAAUC,GACrD,GAAoB,iBAATF,IAAsBA,EAAKG,MAAMC,EAAA,GAAY,CACtD,IAAIC,EAAkBC,EAAYJ,GAElC,OADAG,EAAgBJ,SAAWA,GACpB,EAAAM,EAAA,GAAOP,EAAMK,EACtB,CAEA,IAAIG,GAAI,EAAAD,EAAA,GAAOP,EAAME,GAEjBO,GAAM,EAAAC,EAAA,GACRF,EAAEG,cACFH,EAAEI,WACFJ,EAAEK,UACFL,EAAEM,WACFN,EAAEO,aACFP,EAAEQ,aACFR,EAAES,mBACFC,UAEEC,GAAqB,EAAAC,EAAA,GAAgBnB,EAAU,IAAIoB,KAAKZ,IAE5D,OAAO,IAAIY,KAAKZ,EAAMU,EACxB,CDToBG,CAFF,IAAID,KAAK1B,IAEiB4B,EAAAA,EAAAA,KAAkBtB,UAEtDuB,EAAOzB,EAAUY,cACjBc,EAAQ1B,EAAUa,WAAa,EAGrC,OAFAc,QAAQC,IAAIH,EAAMC,GAGhBrC,EAAAA,cAACwC,EAAAA,EAAM,CAACC,UAAU,sBAEhBzC,EAAAA,cAAAA,KAAAA,KACGoC,EAAK,IAAEC,EAAM,UAEhBrC,EAAAA,cAAAA,KAAAA,KACGS,EAAMiC,KAAKC,IAAS,MACnB,OACE3C,EAAAA,cAAAA,KAAAA,CAAI4C,IAAKD,EAAKE,IACZ7C,EAAAA,cAAC8C,EAAAA,GAAI,CAACC,GAAIJ,EAAKK,OAAQC,KACrBjD,EAAAA,cAAAA,OAAAA,KAtCd,SAAgBkD,IACdf,EAAAA,EAAAA,KACA,MAAMgB,GAAWC,EAAAA,EAAAA,GAASF,IACpB,gBAAEG,IAAoBlB,EAAAA,EAAAA,KAE5B,OADUmB,EAAAA,EAAAA,GAAOH,EAAUE,EAAiB,CAAExC,SAAU,cAE1D,CAgCqB0C,CAAOZ,EAAKK,OAAQQ,aAAqB,IAChDxD,EAAAA,cAAAA,OAAAA,KAAuB,QAAvBA,EAAO2C,EAAKc,mBAAW,aAAhBC,EAAkBxD,QAExB,KAIJ,C","sources":["webpack://blog-tetsuyainfra/./node_modules/date-fns/_lib/assign/index.js","webpack://blog-tetsuyainfra/./node_modules/date-fns/_lib/cloneObject/index.js","webpack://blog-tetsuyainfra/./src/pages/blog/templates/_blog-monthly.tsx","webpack://blog-tetsuyainfra/./node_modules/date-fns-tz/esm/zonedTimeToUtc/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = assign;\n\nfunction assign(target, object) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  for (var property in object) {\n    if (Object.prototype.hasOwnProperty.call(object, property)) {\n      ;\n      target[property] = object[property];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = cloneObject;\n\nvar _index = _interopRequireDefault(require(\"../assign/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction cloneObject(object) {\n  return (0, _index.default)({}, object);\n}\n\nmodule.exports = exports.default;","import * as React from 'react'\nimport { graphql, Link, PageProps } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport { parseISO } from 'date-fns'\nimport { format, utcToZonedTime, zonedTimeToUtc } from 'date-fns-tz'\nimport Layout from '../../../components/layout'\nimport Seo from '../../../components/seo'\nimport useSiteMetadata from '../../../components/useSiteMetadata'\n\ntype PageContext = {\n  periodStartDate: string\n  periodEndDate: string\n}\ntype Props = PageProps<Queries.GetAllBlogEntryForPeriodQuery, PageContext>\n\nconst BlogArchiveMonthlyIndex = ({\n  data,\n  pageContext: { periodEndDate, periodStartDate },\n}: Props) => {\n  // console.log(data)\n  const { nodes: posts } = data.allMarkdownRemark\n\n  function utc2tz(date_string: string) {\n    useSiteMetadata()\n    const utc_date = parseISO(date_string)\n    const { timestampFormat } = useSiteMetadata()\n    const s = format(utc_date, timestampFormat, { timeZone: 'Asia/Tokyo' })\n    return s\n  }\n  // console.log(\n  //   'start',\n  //   periodStartDate,\n  //   parseISO(periodStartDate),\n  //   utc2tz(periodStartDate)\n  // )\n  // console.log(\n  //   'end  ',\n  //   periodEndDate,\n  //   parseISO(periodEndDate),\n  //   utc2tz(periodEndDate)\n  // )\n  const utcDate = new Date(periodStartDate)\n  // console.log('utcDate', utcDate)\n  const zonedDate = zonedTimeToUtc(utcDate, useSiteMetadata().timeZone)\n  // console.log('zonedDate', zonedDate)\n  const year = zonedDate.getFullYear()\n  const month = zonedDate.getMonth() + 1 // 0から始まる\n  console.log(year, month)\n\n  return (\n    <Layout pageTitle=\"Blog Archive Index\">\n      {/* {periodStartDate} - {periodEndDate} */}\n      <h2>\n        {year}年{month}月の記事一覧\n      </h2>\n      <ul>\n        {posts.map((post) => {\n          return (\n            <li key={post.id}>\n              <Link to={post.fields!.url!}>\n                <span>{utc2tz(post.fields!.local_date!)}</span>{' '}\n                <span>{post.frontmatter?.title}</span>\n              </Link>\n            </li>\n          )\n        })}\n      </ul>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"My Blog Posts\" />\nexport default BlogArchiveMonthlyIndex\n\nexport const pageQuery = graphql`\n  query GetAllBlogEntryForPeriod($periodStartDate: Date, $periodEndDate: Date) {\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { date: { gte: $periodStartDate, lt: $periodEndDate } }\n      }\n      sort: { frontmatter: { date: ASC } }\n    ) {\n      totalCount\n      nodes {\n        id\n        fields {\n          year\n          month\n          local_date\n          url\n        }\n        frontmatter {\n          title\n          date\n        }\n        excerpt\n      }\n    }\n  }\n`\n","import cloneObject from 'date-fns/_lib/cloneObject/index.js'\nimport toDate from '../toDate/index.js'\nimport tzPattern from '../_lib/tzPattern/index.js'\nimport tzParseTimezone from '../_lib/tzParseTimezone/index.js'\nimport newDateUTC from '../_lib/newDateUTC/index.js'\n\n/**\n * @name zonedTimeToUtc\n * @category Time Zone Helpers\n * @summary Get the UTC date/time from a date representing local time in a given time zone\n *\n * @description\n * Returns a date instance with the UTC time of the provided date of which the values\n * represented the local time in the time zone specified. In other words, if the input\n * date represented local time in time time zone, the timestamp of the output date will\n * give the equivalent UTC of that local time regardless of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with values representing the local time\n * @param {String} timeZone - the time zone of this local time, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am in Los Angeles is 5pm UTC\n * const result = zonedTimeToUtc(new Date(2014, 5, 25, 10, 0, 0), 'America/Los_Angeles')\n * //=> 2014-06-25T17:00:00.000Z\n */\nexport default function zonedTimeToUtc(date, timeZone, options) {\n  if (typeof date === 'string' && !date.match(tzPattern)) {\n    var extendedOptions = cloneObject(options)\n    extendedOptions.timeZone = timeZone\n    return toDate(date, extendedOptions)\n  }\n\n  var d = toDate(date, options)\n\n  var utc = newDateUTC(\n    d.getFullYear(),\n    d.getMonth(),\n    d.getDate(),\n    d.getHours(),\n    d.getMinutes(),\n    d.getSeconds(),\n    d.getMilliseconds()\n  ).getTime()\n\n  var offsetMilliseconds = tzParseTimezone(timeZone, new Date(utc))\n\n  return new Date(utc + offsetMilliseconds)\n}\n"],"names":["Object","defineProperty","exports","value","target","object","TypeError","property","prototype","hasOwnProperty","call","module","default","_index","obj","__esModule","Head","React","Seo","title","_ref","data","pageContext","periodEndDate","periodStartDate","nodes","posts","allMarkdownRemark","zonedDate","date","timeZone","options","match","tzPattern","extendedOptions","cloneObject","toDate","d","utc","newDateUTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getTime","offsetMilliseconds","tzParseTimezone","Date","zonedTimeToUtc","useSiteMetadata","year","month","console","log","Layout","pageTitle","map","post","key","id","Link","to","fields","url","date_string","utc_date","parseISO","timestampFormat","format","utc2tz","local_date","frontmatter","_post$frontmatter"],"sourceRoot":""}